unit URptPms_PriceLeaseAgent;

interface

uses classes, Forms;

procedure RtpLeaseRunAgent(Thread: TThread; Form, Options: TForm; sFileName, sTypeOperation: string;
                           UseStyle: Boolean; SyncOfficeId: String);

implementation

uses Windows, sysutils, controls, graphics, IBQuery, IBDatabase, Db, IBCustomDataSet, Excel97,
     UMainUnited, URptPms_Price, URptThread, UPremisesTsvData, UPremisesTsvOptions;

procedure RtpLeaseRunAgent(Thread: TThread; Form, Options: TForm; sFileName, sTypeOperation: string;
                           UseStyle: Boolean; SyncOfficeId: String);
var
 tran: TIBTransaction;
 qrStation: TIBQuery;
 qrPremises,qrAgent: TIbQuery;
 sqls: string;
 Sh,ShMain: OleVariant;
 Wb: OleVariant;
 R: OleVariant;
 oldY,curY: Integer;
 Data: Variant;
 Row: Integer;
 TCPB: TCreateProgressBar;
 TSPBS: TSetProgressBarStatus;
 incAgent: Integer;
 pb1: THandle;
 Flag: Boolean;
 AgentDelete: TStringList;
 i,ColumnCount: Integer;
 OldFontName: string;
 fmParent: TfmRptPms_Price;
begin
 fmParent:=TfmRptPms_Price(Form);
 ColumnCount:=fmParent.GetColumnCount;
 if ColumnCount=0 then exit;
 Excel.WorkBooks.Open(sFileName);
 wb:=Excel.WorkBooks.Item[1];
 Sh:=Wb.Sheets.Item[1];
 TRptExcelThreadPms_Price(THread).Synchronize(TRptExcelThreadPms_Price(Thread).GetPlantName);
 Sh.Range[Sh.Cells[1,1],Sh.Cells[1,1]].Value:=TRptExcelThreadPms_Price(Thread).FPlantName;
 R:=Sh.Range[Sh.Cells[1,ColumnCount],Sh.Cells[1,ColumnCount]];
 R.Value:=sTypeOperation+' - '+FormatDateTime(fmtCurDate,fmParent.curdate);
 R.HorizontalAlignment:=xlRight;
 R.Font.Bold:=true;
 if IscnppPhoneName then begin
   OldFontName:=Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name;
   Sh.Columns[IndcnppPhoneName].Font.Name:=fmOptions.edPhoneColumn.Font.Name;
   Sh.Range[Sh.Cells[2,IndcnppPhoneName],Sh.Cells[2,IndcnppPhoneName]].Font.Name:=Sh.Range[Sh.Cells[2,1],Sh.Cells[2,1]].Font.Name;
   Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name:=OldFontName;
 end;
 qrStation:=TIBQuery.Create(nil);
 qrPremises:=TIBQuery.Create(nil);
 qrAgent:=TIBQuery.Create(nil);
 tran:=TIBTransaction.Create(nil);
 AgentDelete:=TStringList.Create;
 Screen.Cursor:=crHourGlass;
 try
   tran.AddDatabase(IBDB);
   IBDB.AddTransaction(tran);
   qrStation.Transaction:=tran;
   qrStation.Database:=IBDB;
   qrPremises.Transaction:=tran;
   qrPremises.Database:=IBDB;
   qrAgent.Transaction:=tran;
   qrAgent.Database:=IBDB;
   tran.Active:=true;

   sqls:='Select sortnumber from '+tbPms_Station+
         ' group by sortnumber '+
         ' order by sortnumber';
   qrStation.SQL.Add(sqls);
   qrStation.Active:=true;
   qrStation.Last;
   qrStation.First;

   sqls:=SQLRbkPms_Agent+
         ' where pms_agent_id in (select p.pms_agent_id from pms_premises p '+
         ' where p.datearrivals>='+QuotedStr(DateToStr(fmParent.dtpDateFrom.DateTime))+
         ' and p.datearrivals<='+QuotedStr(DateToStr(fmParent.dtpDateTo.DateTime))+
         ' and p.typeoperation='+inttostr(1)+fmParent.GetRecyledFilter+fmParent.GetStationFilter+')'+
         ' order by sortnumber';
   qrAgent.SQL.Add(sqls);
   qrAgent.Active:=true;
   qrAgent.Last;
   qrAgent.First;

   ShMain:=Sh;
   incAgent:=1;

   qrAgent.Next;
   repeat
     ShMain.Select;
     ShMain.Copy(After:=Sh);
     Sh:=Wb.Sheets.Item[incAgent];
     inc(incAgent);
     qrAgent.Next;
   until qrAgent.Eof;

   incAgent:=1;
   AgentDelete.Clear;
   qrAgent.First;

   FillChar(TCPB,SizeOf(TCPB),0);
   TCPB.Min:=0;
   TCPB.Max:=qrStation.RecordCount;
   TCPB.Color:=clNavy;
   pb1:=_CreateProgressBar(@TCPB);
   try
     while not qrAgent.Eof do begin
       Sh:=Wb.Sheets.Item[incAgent];
       Sh.Name:='Агент '+qrAgent.FieldByName('name').AsString;
       if (ColumnCount div 2)>=1 then
         Sh.Range[Sh.Cells[1,ColumnCount div 2],Sh.Cells[1,ColumnCount div 2]].Value:=Sh.Name
       else
         Sh.Range[Sh.Cells[1,1],Sh.Cells[1,1]].Value:=Sh.Name;
       curY:=2;
       Flag:=false;
       qrStation.First;
       while not qrStation.Eof do begin
         if TRptExcelThreadPms_Price(Thread).Terminated then exit;
         sqls:=SQLRbkPms_PremisesRpt+
               ' where p.datearrivals>='+QuotedStr(DateToStr(fmParent.dtpDateFrom.DateTime))+
               ' and p.datearrivals<='+QuotedStr(DateToStr(fmParent.dtpDateTo.DateTime))+
               ' and p.pms_station_id in ('+GetPms_Station_IdBySortNumber(qrStation.FieldByName('sortnumber').AsInteger)+')'+
               ' and p.pms_agent_id='+qrAgent.FieldByname('pms_agent_id').AsString+
               ' and p.typeoperation=1 '+
               fmParent.GetRecyledFilter+
               fmParent.GetStationFilter+
               fmParent.GetOfficeFilter+
               fmParent.GetOrder;

         qrPremises.SQL.Clear;
         qrPremises.SQL.Add(sqls);
         qrPremises.Active:=true;
         qrPremises.Last;
         if not qrPremises.IsEmpty then begin

           if Flag then begin
             inc(curY);
             R:=Sh.Range[Sh.Cells[curY,1],Sh.Cells[curY,ColumnCount]];
             R.Merge;
             R.HorizontalAlignment:=xlCenter;
             R.VerticalAlignment:=xlCenter;
             R.Font.Size:=8;
             R.Font.Bold:=true;
           end;
           Flag:=true;

           oldY:=curY+1;
           Row:=1;
           Data:=VarArrayCreate([1,qrPremises.RecordCount,1,ColumnCount],varVariant);
           qrPremises.First;
           while not qrPremises.Eof do begin
             if TRptExcelThreadPms_Price(Thread).Terminated then exit;
             inc(curY);
             if IscnppDateArrivals then
               Data[Row,IndcnppDateArrivals]:=FormatDateTime(fmtSmallDate,qrPremises.FieldByName('datearrivals').AsDateTime);
             if IscnppRegionName then
               Data[Row,IndcnppRegionName]:=qrPremises.FieldByName('regionname').AsString;
             if IscnppCountRoomName then
               Data[Row,IndcnppCountRoomName]:=qrPremises.FieldByName('countroomname').AsString;
             if IscnppStreetName then
               Data[Row,IndcnppStreetName]:=qrPremises.FieldByName('streetname').AsString;
             if IscnppHouseNumber then
               Data[Row,IndcnppHouseNumber]:=qrPremises.FieldByName('housenumber').AsString;
             if IscnppApartmentNumber then
               Data[Row,IndcnppApartmentNumber]:=qrPremises.FieldByName('apartmentnumber').AsString;
             if IscnppNote then
               Data[Row,IndcnppNote]:=qrPremises.FieldByName('note').AsString;
            if IscnppAdvertismentNote then
               Data[Row,IndcnppAdvertisment]:=qrPremises.FieldByName('advertisment_note').AsString;
            if IscnppPhoneName then
               Data[Row,IndcnppPhoneName]:=qrPremises.FieldByName('phonename').AsString;
             if IscnppFurnitureName then
               Data[Row,IndcnppFurnitureName]:=qrPremises.FieldByName('furniturename').AsString;
             if IscnppFloorCountFloorTypeHouseName then
               Data[Row,IndcnppFloorCountFloorTypeHouseName]:=iff((Trim(qrPremises.FieldByName('floor').AsString)<>'')or
                                                                (Trim(qrPremises.FieldByName('countfloor').AsString)<>''),
                                                                qrPremises.FieldByName('floor').AsString+'/'+
                                                                qrPremises.FieldByName('countfloor').AsString+
                                                                qrPremises.FieldByName('typehousename').AsString,'');
             if IscnppPlanningName then
               Data[Row,IndcnppPlanningName]:=qrPremises.FieldByName('planningname').AsString;
             if IscnppTypeRoomName then
               Data[Row,IndcnppTypeRoomName]:=qrPremises.FieldByName('typeroomname').AsString;
             if IscnppGeneralDwellingKitchenArea then
               Data[Row,IndcnppGeneralDwellingKitchenArea]:=Iff((Trim(qrPremises.FieldByName('generalarea').AsString)<>'') or
                                                              (Trim(qrPremises.FieldByName('dwellingarea').AsString)<>'') or
                                                              (Trim(qrPremises.FieldByName('kitchenarea').AsString)<>''),
                                                              qrPremises.FieldByName('generalarea').AsString+'/'+
                                                              qrPremises.FieldByName('dwellingarea').AsString+'/'+
                                                              qrPremises.FieldByName('kitchenarea').AsString,'');
             if IscnppDoorName then
               Data[Row,IndcnppDoorName]:=qrPremises.FieldByName('doorname').AsString;
             if IscnppBalconyName then
               Data[Row,IndcnppBalconyName]:=qrPremises.FieldByName('balconyname').AsString;
             if IscnppSanitaryNodeName then
               Data[Row,IndcnppSanitaryNodeName]:=qrPremises.FieldByName('sanitarynodename').AsString;
             if IscnppWaterName then
               Data[Row,IndcnppWaterName]:=qrPremises.FieldByName('Watername').AsString;
             if IscnppHeatName then
               Data[Row,IndcnppHeatName]:=qrPremises.FieldByName('Heatname').AsString;
             if IscnppStoveName then
               Data[Row,IndcnppStoveName]:=qrPremises.FieldByName('stovename').AsString;
             if IscnppPriceUnitPrice then
               Data[Row,IndcnppPriceUnitPrice]:=qrPremises.FieldByName('price').AsString+qrPremises.FieldByName('unitpricename').AsString;
             if IscnppPaymentTerm then
               Data[Row,IndcnppPaymentTerm]:=iff((Trim(qrPremises.FieldByName('payment').AsString)<>'')or
                                               (Trim(qrPremises.FieldByName('term').AsString)<>''),
                                               qrPremises.FieldByName('payment').AsString+'/'+
                                               qrPremises.FieldByName('term').AsString,'');
             if IscnppStationName then
               Data[Row,IndcnppStationName]:=qrPremises.FieldByName('stationname').AsString;
             if IscnppContactClientInfo then
               Data[Row,IndcnppContactClientInfo]:=Trim(TranslateContact(Trim(qrPremises.FieldByName('contact').AsString))+' '+qrPremises.FieldByName('clientinfo').AsString);
             if IscnppDateTimeUpdate then
               Data[Row,IndcnppDateTimeUpdate]:=FormatDateTime(fmtSmallDate,qrPremises.FieldByName('datetimeupdate').AsDateTime);
             if IscnppPrice then
               Data[Row,IndcnppPrice]:=qrPremises.FieldByName('price').AsString;
             if IscnppDateTimeInsert then
                 Data[Row,IndcnppDateTimeInsert]:=FormatDateTime(fmtSmallDate,qrPremises.FieldByName('datetimeinsert').AsDateTime);
                   
             inc(Row);
             R:=Sh.Range[Sh.Cells[curY,1],Sh.Cells[curY,ColumnCount]];
             if UseStyle and (Trim(qrPremises.FieldByName('stylestyle').AsString)<>'') then
               R.Style:=qrPremises.FieldByName('stylestyle').AsString;
             qrPremises.Next;
           end;
           R:=Sh.Range[Sh.Cells[oldY,1],Sh.Cells[curY,ColumnCount]];
           R.Font.Size:=6;
           R.Value:=Data;

           if IscnppPhoneName then begin
             OldFontName:=Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name;
             Sh.Columns[IndcnppPhoneName].Font.Name:=fmOptions.edPhoneColumn.Font.Name;
             Sh.Range[Sh.Cells[2,IndcnppPhoneName],Sh.Cells[2,IndcnppPhoneName]].Font.Name:=Sh.Range[Sh.Cells[2,1],Sh.Cells[2,1]].Font.Name;
             Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name:=OldFontName;
           end;

         end;
         qrStation.Next;
       end;
       if not Flag then begin
         AgentDelete.Add(IntToStr(incAgent));
       end;
       FillChar(TSPBS,SizeOf(TSPBS),0);
       TSPBS.Progress:=incAgent;
       TSPBS.Max:=qrAgent.RecordCount;
       _SetProgressBarStatus(pb1,@TSPBS);
       inc(incAgent);
       qrAgent.Next;
     end;
   finally
     TRptExcelThreadPms_Price(Thread).FCurPB:=pb1;
     TRptExcelThreadPms_Price(Thread).Synchronize(TRptExcelThreadPms_Price(Thread).FreeCurPB);
   end;

   if IscnppPhoneName then begin
     OldFontName:=Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name;
     Sh.Columns[IndcnppPhoneName].Font.Name:=fmOptions.edPhoneColumn.Font.Name;
     Sh.Range[Sh.Cells[2,IndcnppPhoneName],Sh.Cells[2,IndcnppPhoneName]].Font.Name:=Sh.Range[Sh.Cells[2,1],Sh.Cells[2,1]].Font.Name;
     Sh.Range[Sh.Cells[1,IndcnppPhoneName],Sh.Cells[1,IndcnppPhoneName]].Font.Name:=OldFontName;
   end;

   Excel.Application.DisplayAlerts:=False;
   for i:=AgentDelete.Count-1 downto 0 do begin
     Sh:=Wb.Sheets.Item[StrToInt(AgentDelete.Strings[i])];
     if Wb.Sheets.Count>1 then
       Sh.Delete;
   end;
   Excel.Application.DisplayAlerts:=True;

   if Wb.Sheets.Count>0 then begin
     ShMain:=Wb.Sheets.Item[1];
     ShMain.Activate;
   end;
   Wb.Save;

 finally
   AgentDelete.Free;
   tran.free;
   qrAgent.Free;
   qrPremises.Free;
   qrStation.Free;
   Screen.Cursor:=crDefault;
 end;
end;

end.
