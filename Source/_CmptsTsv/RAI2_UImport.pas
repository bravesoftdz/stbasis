unit RAI2_UImport;

 { adapter unit - converts RAI2 calls to delphi calls }
 { automatically generated by Pas2RAI2 }

{ if compiled with errors:
   - to convert variant to object use function V2O
   - to convert object to variant use function O2V
   - to convert variant to pointer use function V2P
   - to convert pointer to variant use function P2V
   - to convert set to variant use function S2V and
     typecasting such as:
       Value := S2V(byte(TFont(Args.Obj).Style))
   - to convert variant to set use typecasting
     and function V2S such as:
       TFont(Args.Obj).Style := TFontStyles(byte(V2S(Value)))
     depending on size of set (f.e. sizeof(TFontStyles)),
     try to use byte, word or integer types in typecasting
   - sets with more when 32 elements can't be used in RAI2   }

interface

uses RAI2;

  procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);

implementation

uses UImport, UMainUnited, SysUtils;


{ function _isPermission(sqlObject: PChar; sqlOperator: PChar): Boolean; }
procedure RAI2__isPermission(var Value: Variant; Args: TArgs);
begin
  Value := _isPermission(PChar(string(Args.Values[0])), PChar(string(Args.Values[1])));
end;

{ function _isPermissionSecurity(sqlObject: PChar; sqlOperator: PChar): Boolean; }
procedure RAI2__isPermissionSecurity(var Value: Variant; Args: TArgs);
begin
  Value := _isPermissionSecurity(PChar(string(Args.Values[0])), PChar(string(Args.Values[1])));
end;

{ procedure _SetSplashStatus(Status: Pchar); }
procedure RAI2__SetSplashStatus(var Value: Variant; Args: TArgs);
begin
  _SetSplashStatus(PChar(string(Args.Values[0])));
end;

{ procedure _GetProtocolAndServerName(DataBaseStr: Pchar; var Protocol: TProtocol; var ServerName: array of char); }
procedure RAI2__GetProtocolAndServerName(var Value: Variant; Args: TArgs);
begin
//  _GetProtocolAndServerName(PChar(string(Args.Values[0])), Args.Values[1], Args.Values[2]);
end;

{ procedure _GetInfoConnectUser(P: PInfoConnectUser); }
procedure RAI2__GetInfoConnectUser(var Value: Variant; Args: TArgs);
begin
//  _GetInfoConnectUser(Args.Values[0]);
end;

{ procedure _AddErrorToJournal(Error: PChar; ClassError: TClass); }
procedure RAI2__AddErrorToJournal(var Value: Variant; Args: TArgs);
begin
//  _AddErrorToJournal(PChar(string(Args.Values[0])), Args.Values[1]);
end;

{ procedure _AddSqlOperationToJournal(Name, Hint: PChar); }
procedure RAI2__AddSqlOperationToJournal(var Value: Variant; Args: TArgs);
begin
  _AddSqlOperationToJournal(PChar(string(Args.Values[0])), PChar(string(Args.Values[1])));
end;

{ function _GetDateTimeFromServer: TDateTime; }
procedure RAI2__GetDateTimeFromServer(var Value: Variant; Args: TArgs);
begin
  Value := _GetDateTimeFromServer;
end;

{ function _GetListLibs: TList; }
procedure RAI2__GetListLibs(var Value: Variant; Args: TArgs);
begin
//  Value := O2V(_GetListLibs);
end;

{ function _TestSplash: Boolean; }
procedure RAI2__TestSplash(var Value: Variant; Args: TArgs);
begin
  Value := _TestSplash;
end;


{ function _CreateToolBar(PCTB: PCreateToolBar): THandle; }
procedure RAI2__CreateToolBar(var Value: Variant; Args: TArgs);
begin
  Value := _CreateToolBar(PCreateToolBar(@Args.Values[0]));
end;

{ function _RefreshToolBar(ToolBarHandle: THandle): Boolean; }
procedure RAI2__RefreshToolBar(var Value: Variant; Args: TArgs);
begin
  Value := _RefreshToolBar(Args.Values[0]);
end;

{ function _FreeToolBar(ToolBarHandle: THandle): Boolean; }
procedure RAI2__FreeToolBar(var Value: Variant; Args: TArgs);
begin
  Value := _FreeToolBar(Args.Values[0]);
end;

{ function _CreateToolButton(ToolBarHandle: THandle; PCTB: PCreateToolButton): THandle; }
procedure RAI2__CreateToolButton(var Value: Variant; Args: TArgs);
begin
  Value := _CreateToolButton(Args.Values[0], PCreateToolButton(@Args.Values[1]));
end;

{ function _FreeToolButton(ToolButtonHandle: THandle): Boolean; }
procedure RAI2__FreeToolButton(var Value: Variant; Args: TArgs);
begin
  Value := _FreeToolButton(Args.Values[0]);
end;

{ function _CreateOption(ParentHandle: THandle; PCO: PCreateOption): THandle; }
procedure RAI2__CreateOption(var Value: Variant; Args: TArgs);
begin
  Value := _CreateOption(Args.Values[0], PCreateOption(@Args.Values[1]));
end;

{ function _FreeOption(OptionHandle: THandle): Boolean; }
procedure RAI2__FreeOption(var Value: Variant; Args: TArgs);
begin
  Value := _FreeOption(Args.Values[0]);
end;

{ function _ViewOption(OptionHandle: THandle): Boolean; }
procedure RAI2__ViewOption(var Value: Variant; Args: TArgs);
begin
  Value := _ViewOption(Args.Values[0]);
end;

{ function _GetOptionParentWindow(OptionHandle: THandle): THandle; }
procedure RAI2__GetOptionParentWindow(var Value: Variant; Args: TArgs);
begin
  Value := _GetOptionParentWindow(Args.Values[0]);
end;

{ function _CreateMenu(ParentHandle: THandle; PCM: PCreateMenu): THandle; }
procedure RAI2__CreateMenu(var Value: Variant; Args: TArgs);
begin
  Value := _CreateMenu(Args.Values[0], PCreateMenu(@Args.Values[1]));
end;

{ function _FreeMenu(MenuHandle: THandle): Boolean; }
procedure RAI2__FreeMenu(var Value: Variant; Args: TArgs);
begin
  Value := _FreeMenu(Args.Values[0]);
end;

{ function _GetMenuHandleFromName(ParentHandle: THandle; Name: PChar): THandle; }
procedure RAI2__GetMenuHandleFromName(var Value: Variant; Args: TArgs);
begin
  Value := _GetMenuHandleFromName(Args.Values[0], PChar(string(Args.Values[1])));
end;

{ function _ViewMenu(MenuHandle: THandle): Boolean; }
procedure RAI2__ViewMenu(var Value: Variant; Args: TArgs);
begin
  Value := _ViewMenu(Args.Values[0]);
end;

{ function _CreateInterface(PCI: PCreateInterface): THandle; }
procedure RAI2__CreateInterface(var Value: Variant; Args: TArgs);
begin
  Value := _CreateInterface(PCreateInterface(@Args.Values[0]));
end;

{ function _FreeInterface(InterfaceHandle: THandle): Boolean; }
procedure RAI2__FreeInterface(var Value: Variant; Args: TArgs);
begin
  Value := _FreeInterface(Args.Values[0]);
end;

{ function _GetInterfaceHandleFromName(Name: PChar): THandle; }
procedure RAI2__GetInterfaceHandleFromName(var Value: Variant; Args: TArgs);
begin
  Value := _GetInterfaceHandleFromName(PChar(string(Args.Values[0])));
end;

{ function _ViewInterface(InterfaceHandle: THandle; Param: Pointer): Boolean; }
procedure RAI2__ViewInterface(var Value: Variant; Args: TArgs);
begin
  Value := _ViewInterface(Args.Values[0], V2P(Args.Values[1]));
end;

{ function _ViewInterfaceFromName(Name: PChar; Param: Pointer): Boolean; }
procedure RAI2__ViewInterfaceFromName(var Value: Variant; Args: TArgs);
begin
  Value := _ViewInterfaceFromName(PChar(string(Args.Values[0])), V2P(Args.Values[1]));
end;

{ function _CreatePermissionForInterface(InterfaceHandle: THandle; PCPFI: PCreatePermissionForInterface): Boolean; }
procedure RAI2__CreatePermissionForInterface(var Value: Variant; Args: TArgs);
begin
  Value := _CreatePermissionForInterface(Args.Values[0], PCreatePermissionForInterface(@Args.Values[1]));
end;


procedure RAI2_NewTCreateMenu(var Value: Pointer);
begin
  New(PCreateMenu(Value));
end;

procedure RAI2_DisposeTCreateMenu(const Value: Pointer);
begin
  Dispose(PCreateMenu(Value));
end;

procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);
begin
  with RAI2Adapter do
  begin
    AddFun('UImport', '_isPermission', RAI2__isPermission, 2, [varString, varString], varBoolean);
    AddFun('UImport', '_isPermissionSecurity', RAI2__isPermissionSecurity, 2, [varString, varString], varBoolean);
    AddFun('UImport', '_SetSplashStatus', RAI2__SetSplashStatus, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_GetProtocolAndServerName', RAI2__GetProtocolAndServerName, 3, [varEmpty, varEmpty or varByRef, varEmpty or varByRef], varBoolean);
    AddFun('UImport', '_GetInfoConnectUser', RAI2__GetInfoConnectUser, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_AddErrorToJournal', RAI2__AddErrorToJournal, 2, [varEmpty, varEmpty], varBoolean);
    AddFun('UImport', '_AddSqlOperationToJournal', RAI2__AddSqlOperationToJournal, 2, [varEmpty, varEmpty], varBoolean);
    AddFun('UImport', '_GetDateTimeFromServer', RAI2__GetDateTimeFromServer, 0, [0], varDate);
    AddFun('UImport', '_GetListLibs', RAI2__GetListLibs, 0, [0], varObject);
    AddFun('UImport', '_TestSplash', RAI2__TestSplash, 0, [0], varBoolean);
    AddFun('UImport', '_CreateToolBar', RAI2__CreateToolBar, 1, [varEmpty], varEmpty);
    AddFun('UImport', '_RefreshToolBar', RAI2__RefreshToolBar, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_FreeToolBar', RAI2__FreeToolBar, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_CreateToolButton', RAI2__CreateToolButton, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UImport', '_FreeToolButton', RAI2__FreeToolButton, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_CreateOption', RAI2__CreateOption, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UImport', '_FreeOption', RAI2__FreeOption, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_ViewOption', RAI2__ViewOption, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_GetOptionParentWindow', RAI2__GetOptionParentWindow, 1, [varEmpty], varEmpty);
    AddFun('UImport', '_CreateMenu', RAI2__CreateMenu, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UImport', '_FreeMenu', RAI2__FreeMenu, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_GetMenuHandleFromName', RAI2__GetMenuHandleFromName, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UImport', '_ViewMenu', RAI2__ViewMenu, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_CreateInterface', RAI2__CreateInterface, 1, [varEmpty], varEmpty);
    AddFun('UImport', '_FreeInterface', RAI2__FreeInterface, 1, [varEmpty], varBoolean);
    AddFun('UImport', '_GetInterfaceHandleFromName', RAI2__GetInterfaceHandleFromName, 1, [varEmpty], varEmpty);
    AddFun('UImport', '_ViewInterface', RAI2__ViewInterface, 2, [varEmpty, varPointer], varBoolean);
    AddFun('UImport', '_ViewInterfaceFromName', RAI2__ViewInterfaceFromName, 2, [varEmpty, varPointer], varBoolean);
    AddFun('UImport', '_CreatePermissionForInterface', RAI2__CreatePermissionForInterface, 2, [varEmpty, varEmpty], varBoolean);

    AddRec('UImport', 'TCreateMenu', sizeof(TCreateMenu), [
       RFD('Name', 0, varString),
       RFD('Hint', 4, varString),
       RFD('Bitmap', 8, varObject),
       RFD('ShortCut', 12, varInteger),
       RFD('MenuClickProc', 16, varPointer),
       RFD('TypeCreateMenu', 20, varInteger),
       RFD('InsertMenuHandle', 16, varInteger)
      ], RAI2_NewTCreateMenu, RAI2_DisposeTCreateMenu, nil
    );

  end;    { with }
end;    { RegisterRAI2Adapter }

end.
