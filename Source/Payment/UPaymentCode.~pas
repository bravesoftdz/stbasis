unit UPaymentCode;

interface

{$I stbasis.inc}

uses Windows, Forms, UPaymentData, UMainUnited, Classes, UPaymentDm, graphics, dialogs,
     IBDatabase, IBQuery, Controls, tsvHint, db, SysUtils, IBServices, stdctrls,
     comctrls, extctrls, tsvInterpreterCore;

// Internal
procedure DeInitAll;
procedure ClearListInterfaceHandles;
procedure AddToListInterfaceHandles;
function ViewInterface(InterfaceHandle: THandle; Param: Pointer): Boolean; stdcall;
procedure ClearListMenuHandles;
procedure MenuClickProc(MenuHandle: THandle);stdcall;
procedure AddToListMenuRootHandles;
procedure ClearListToolBarHandles;
procedure ToolButtonClickProc(ToolButtonHandle: THandle);stdcall;
procedure AddToListToolBarHandles;
procedure ClearListOptionHandles;
procedure AddToListOptionRootHandles;
function isPermissionOnInterfaceView(InterfaceHandle: THandle): Boolean;
procedure AddToListInterpreterFunHandles;
procedure ClearListInterpreterFunHandles;

// Export
procedure InitAll_;stdcall;
procedure GetInfoLibrary_(P: PInfoLibrary);stdcall;
procedure RefreshLibrary_;stdcall;
procedure SetConnection_(IBDbase: TIBDatabase; IBTran: TIBTransaction;
                         IBDBSecurity: TIBDatabase; IBTSecurity: TIBTransaction);stdcall;

// Import

implementation

uses ActiveX,Menus,tsvDbGrid,dbtree,
     URBPurpose, URBCard, URBPayment;

//******************* Internal ************************

procedure InitAll_; stdcall;
begin
 try
  CoInitialize(nil);
  dm:=Tdm.Create(nil);

  ListInterfaceHandles:=TList.Create;
  AddToListInterfaceHandles;

  ListMenuHandles:=Tlist.Create;
  AddToListMenuRootHandles;

  ListOptionHandles:=TList.Create;
  AddToListOptionRootHandles;

  ListToolBarHandles:=TList.Create;
  AddToListToolBarHandles;

  ListInterpreterFunHandles:=TList.Create;
  AddToListInterpreterFunHandles;
  

  isInitAll:=true;
 except
  {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
 end;
end;

procedure DeInitAll;
begin
 try
  if not isInitAll then exit;

  FreeAndNil(fmRBPurpose);
  FreeAndNil(fmRBCard);
  FreeAndNil(fmRBPayment);

  ClearListMenuHandles;
  ListMenuHandles.free;

  ClearListOptionHandles;
  ListOptionHandles.Free;

  ClearListToolBarHandles;
  ListToolBarHandles.Free;

  ClearListInterfaceHandles;
  ListInterfaceHandles.Free;

  ClearListInterpreterFunHandles;
  ListInterpreterFunHandles.Free;

  dm.Free;

 except
//  {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
 end;
end;

procedure ClearListToolBarHandles;
var
  i: Integer;
begin
  for i:=0 to ListToolBarHandles.Count-1 do begin
    _FreeToolBar(THandle(ListToolBarHandles.Items[i]));
  end;
  ListToolBarHandles.Clear;
end;

procedure ToolButtonClickProc(ToolButtonHandle: THandle);stdcall;
begin
end;

procedure AddToListToolBarHandles;

  function CreateToolBarLocal(Name,Hint: PChar;
                              ShortCut: TShortCut;
                              Visible: Boolean=true;
                              Position: TToolBarPosition=tbpTop): THandle;
  var
    CTBLocal: TCreateToolBar;
  begin
    FillChar(CTBLocal,SizeOf(TCreateToolBar),0);
    CTBLocal.Name:=Name;
    CTBLocal.Hint:=Hint;
    CTBLocal.ShortCut:=ShortCut;
    CTBLocal.Visible:=Visible;
    CTBLocal.Position:=Position;
    Result:=_CreateToolBar(@CTBLocal);
  end;

  function CreateToolButtonLocal(TH: THandle; Name,Hint: PChar;
                                 ImageIndex: Integer; Proc: TToolButtonClickProc=nil;
                                 Style: TToolButtonStyleEx=tbseButton;
                                 Control: TControl=nil): THandle;
  var
   CTBLocal: TCreateToolButton;
   Image: TBitmap;
  begin
   Image:=nil;
   try
    Result:=TOOLBUTTON_INVALID_HANDLE;
    Image:=TBitmap.Create;
    FillChar(CTBLocal,SizeOf(TCreateToolButton),0);
    CTBLocal.Name:=Name;
    CTBLocal.Hint:=Hint;
    dm.IL.GetBitmap(ImageIndex,Image);
    CTBLocal.Bitmap:=Image;
    CTBLocal.ToolButtonClickProc:=Proc;
    CTBLocal.Style:=Style;
    CTBLocal.Control:=Control;
    Result:=_CreateToolButton(TH,@CTBLocal);
   finally
     Image.Free;
   end;
  end;

begin
end;

procedure ClearListOptionHandles;
var
  i: Integer;
begin
  for i:=0 to ListOptionHandles.Count-1 do begin
    _FreeOption(THandle(ListOptionHandles.Items[i]));
  end;
  ListOptionHandles.Clear;
end;

procedure AddToListOptionRootHandles;
begin
  ListOptionHandles.Clear;
end;

procedure ClearListMenuHandles;
var
  i: Integer;
begin
  for i:=0 to ListMenuHandles.Count-1 do begin
    _FreeMenu(THandle(ListMenuHandles.Items[i]));
  end;
  ListMenuHandles.Clear;
end;

procedure MenuClickProc(MenuHandle: THandle);stdcall;
var
  TPRBI: TParamRBookInterface;
begin
  FillChar(TPRBI,SizeOf(TPRBI),0);

  if MenuHandle=hMenuRBooksPurpose then ViewInterface(hInterfaceRbkPurpose,@TPRBI);
  if MenuHandle=hMenuRBooksCard then ViewInterface(hInterfaceRbkCard,@TPRBI);
  if MenuHandle=hMenuRBooksPayment then ViewInterface(hInterfaceRbkPayment,@TPRBI);
end;

procedure AddToListMenuRootHandles;

  function CreateMenuLocal(ParentHandle: THandle; Name: PChar;
                           Hint: PChar;
                           TypeCreateMenu: TTypeCreateMenu=tcmAddLast;
                           InsertMenuHandle: THandle=MENU_INVALID_HANDLE;
                           ImageIndex: Integer=-1;
                           ShortCut: TShortCut=0;
                           Proc: TMenuClickProc=nil): THandle;
  var
   CMLocal: TCreateMenu;
   Image: TBitmap;
  begin
   Image:=nil;
   try
    Result:=MENU_INVALID_HANDLE;
    Image:=TBitmap.Create;
    FillChar(CMLocal,SizeOf(TCreateMenu),0);
    CMLocal.Name:=Name;
    CMLocal.Hint:=Hint;
    CMLocal.MenuClickProc:=Proc;
    CMLocal.ShortCut:=ShortCut;
    CMLocal.TypeCreateMenu:=TypeCreateMenu;
    CMLocal.InsertMenuHandle:=InsertMenuHandle;
    if ImageIndex<>-1 then begin
     dm.IL.GetBitmap(ImageIndex,Image);
     CMLocal.Bitmap:=Image;
    end;
    Result:=_CreateMenu(ParentHandle,@CMLocal);
   finally
     Image.Free;
   end;
  end;

var
  isFreeMenuRBooks: Boolean;
begin
  ListMenuHandles.Clear;

  hMenuRBooks:=CreateMenuLocal(MENU_ROOT_HANDLE,ConstsMenuRBooks,PChar(ChangeString(ConstsMenuRBooks,'&','')),
                               tcmInsertBefore,_GetMenuHandleFromName(MENU_ROOT_HANDLE,ConstsMenuService));
  ListMenuHandles.Add(Pointer(hMenuRBooks));
  hMenuRBooksPurpose:=MENU_INVALID_HANDLE;
  if isPermissionOnInterfaceView(hInterfaceRbkPurpose) then
    hMenuRBooksPurpose:=CreateMenuLocal(hMenuRBooks,'Назначения платежа',NameRbkPurpose,tcmAddLast,MENU_INVALID_HANDLE,-1,0,MenuClickProc);
  hMenuRBooksCard:=MENU_INVALID_HANDLE;
  if isPermissionOnInterfaceView(hInterfaceRbkCard) then
    hMenuRBooksCard:=CreateMenuLocal(hMenuRBooks,'Карты оплаты',NameRbkCard,tcmAddLast,MENU_INVALID_HANDLE,-1,0,MenuClickProc);
  hMenuRBooksPayment:=MENU_INVALID_HANDLE;
  if isPermissionOnInterfaceView(hInterfaceRbkPayment) then
    hMenuRBooksPayment:=CreateMenuLocal(hMenuRBooks,'Платежи',NameRbkPayment,tcmAddLast,MENU_INVALID_HANDLE,-1,0,MenuClickProc);
  isFreeMenuRBooks:=(hMenuRBooks<>MENU_INVALID_HANDLE) and
                    (hMenuRBooksPurpose=MENU_INVALID_HANDLE) and
                    (hMenuRBooksCard=MENU_INVALID_HANDLE) and
                    (hMenuRBooksPayment=MENU_INVALID_HANDLE);
  if isFreeMenuRBooks then
    if _FreeMenu(hMenuRBooks) then hMenuRBooks:=MENU_INVALID_HANDLE;
end;

procedure ClearListInterfaceHandles;
var
  i: Integer;
begin
  for i:=0 to ListInterfaceHandles.Count-1 do begin
    _FreeInterface(THandle(ListInterfaceHandles.Items[i]));
  end;
  ListInterfaceHandles.Clear;
end;

procedure AddToListInterfaceHandles;

  function CreateLocalInterface(Name,Hint: PChar; TypeInterface: TTypeInterface=ttiRBook): THandle;
  var
    TPCI: TCreateInterface;
  begin
    FillChar(TPCI,SizeOf(TCreateInterface),0);
    TPCI.Name:=Name;
    TPCI.Hint:=Hint;
    TPCI.ViewInterface:=ViewInterface;
    TPCI.TypeInterface:=TypeInterface;
    Result:=_CreateInterface(@TPCI);
    ListInterfaceHandles.Add(Pointer(Result));
  end;

  function CreateLocalPermission(InterfaceHandle: THandle;
                                 DBObject: PChar;
                                 DBPermission: TTypeDBPermission=ttpSelect;
                                 DBSystem: Boolean=false;
                                 Action: TTypeInterfaceAction=ttiaView): Boolean;
  var
     TCPFI: TCreatePermissionForInterface;
  begin
     FillCHar(TCPFI,SizeOf(TCreatePermissionForInterface),0);
     TCPFI.Action:=Action;
     TCPFI.DBObject:=DBObject;
     TCPFI.DBPermission:=DBPermission;
     TCPFI.DBSystem:=DBSystem;
     Result:=_CreatePermissionForInterface(InterfaceHandle,@TCPFI);
  end;


begin
  ListInterfaceHandles.Clear;

  hInterfaceRbkPurpose:=CreateLocalInterface(NameRbkPurpose,NameRbkPurpose);
  CreateLocalPermission(hInterfaceRbkPurpose,tbPurpose,ttpSelect,false);
  CreateLocalPermission(hInterfaceRbkPurpose,tbPurpose,ttpUpdate,false,ttiaChange);
  CreateLocalPermission(hInterfaceRbkPurpose,tbPurpose,ttpInsert,false,ttiaAdd);
  CreateLocalPermission(hInterfaceRbkPurpose,tbPurpose,ttpDelete,false,ttiaDelete);

  hInterfaceRbkCard:=CreateLocalInterface(NameRbkCard,NameRbkCard);
  CreateLocalPermission(hInterfaceRbkCard,tbCard,ttpSelect,false);
  CreateLocalPermission(hInterfaceRbkCard,tbCard,ttpUpdate,false,ttiaChange);
  CreateLocalPermission(hInterfaceRbkCard,tbCard,ttpInsert,false,ttiaAdd);
  CreateLocalPermission(hInterfaceRbkCard,tbCard,ttpDelete,false,ttiaDelete);

  hInterfaceRbkPayment:=CreateLocalInterface(NameRbkPayment,NameRbkPayment);
  CreateLocalPermission(hInterfaceRbkPayment,tbPayment,ttpSelect,false);
  CreateLocalPermission(hInterfaceRbkPayment,tbPayment,ttpUpdate,false,ttiaChange);
  CreateLocalPermission(hInterfaceRbkPayment,tbPayment,ttpInsert,false,ttiaAdd);
  CreateLocalPermission(hInterfaceRbkPayment,tbPayment,ttpDelete,false,ttiaDelete);
  CreateLocalPermission(hInterfaceRbkPayment,tbCard,ttpSelect,false);
  CreateLocalPermission(hInterfaceRbkPayment,tbPurpose,ttpSelect,false);

end;

function CreateAndViewPurpose(InterfaceHandle: THandle; Param: PParamRBookInterface): Boolean;

   function CreateAndViewAsMDIChild: Boolean;
   begin
    result:=false;
    try
     if fmRBPurpose=nil then
       fmRBPurpose:=TfmRBPurpose.Create(Application);
     fmRBPurpose.InitMdiChildParams(InterfaceHandle,Param);
     Result:=true;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

   function CreateAndViewAsModal: Boolean;
   var
    fm: TfmRBPurpose;
   begin
    Result:=false;
    try
     fm:=nil;
     try
       fm:=TfmRBPurpose.Create(nil);
       fm.InitModalParams(InterfaceHandle,Param);
       if fm.ShowModal=mrOk then begin
        fm.ReturnModalParams(Param);
        Result:=true;
       end;
     finally
       fm.Free;
     end;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

begin
  Result:=false;
  case Param.Visual.TypeView of
    tviMdiChild: Result:=CreateAndViewAsMDIChild;
    tvibvModal: Result:=CreateAndViewAsModal;
    tviOnlyData: Result:=QueryForParamRBookInterface(IBDB,SQLRbkPurpose,Param);
  end;
end;

function CreateAndViewCard(InterfaceHandle: THandle; Param: PParamRBookInterface): Boolean;

   function CreateAndViewAsMDIChild: Boolean;
   begin
    result:=false;
    try
     if fmRBCard=nil then
       fmRBCard:=TfmRBCard.Create(Application);
     fmRBCard.InitMdiChildParams(InterfaceHandle,Param);
     Result:=true;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

   function CreateAndViewAsModal: Boolean;
   var
    fm: TfmRBCard;
   begin
    Result:=false;
    try
     fm:=nil;
     try
       fm:=TfmRBCard.Create(nil);
       fm.InitModalParams(InterfaceHandle,Param);
       if fm.ShowModal=mrOk then begin
        fm.ReturnModalParams(Param);
        Result:=true;
       end;
     finally
       fm.Free;
     end;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

begin
  Result:=false;
  case Param.Visual.TypeView of
    tviMdiChild: Result:=CreateAndViewAsMDIChild;
    tvibvModal: Result:=CreateAndViewAsModal;
    tviOnlyData: Result:=QueryForParamRBookInterface(IBDB,SQLRbkCard,Param);
  end;
end;

function CreateAndViewPayment(InterfaceHandle: THandle; Param: PParamRBookInterface): Boolean;

   function CreateAndViewAsMDIChild: Boolean;
   begin
    result:=false;
    try
     if fmRBPayment=nil then
       fmRBPayment:=TfmRBPayment.Create(Application);
     fmRBPayment.InitMdiChildParams(InterfaceHandle,Param);
     Result:=true;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

   function CreateAndViewAsModal: Boolean;
   var
    fm: TfmRBPayment;
   begin
    Result:=false;
    try
     fm:=nil;
     try
       fm:=TfmRBPayment.Create(nil);
       fm.InitModalParams(InterfaceHandle,Param);
       if fm.ShowModal=mrOk then begin
        fm.ReturnModalParams(Param);
        Result:=true;
       end;
     finally
       fm.Free;
     end;
    except
     {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
    end;
   end;

begin
  Result:=false;
  case Param.Visual.TypeView of
    tviMdiChild: Result:=CreateAndViewAsMDIChild;
    tvibvModal: Result:=CreateAndViewAsModal;
    tviOnlyData: Result:=QueryForParamRBookInterface(IBDB,SQLRbkPayment,Param);
  end;
end;


function ViewInterface(InterfaceHandle: THandle; Param: Pointer): Boolean; stdcall;
begin
  Result:=false;

  // RBooks

  if InterfaceHandle=hInterfaceRbkPurpose then begin
    if not isValidPointer(Param,SizeOf(TParamRBookInterface)) then exit;
    Result:=CreateAndViewPurpose(InterfaceHandle,Param);
  end;
  if InterfaceHandle=hInterfaceRbkCard then begin
    if not isValidPointer(Param,SizeOf(TParamRBookInterface)) then exit;
    Result:=CreateAndViewCard(InterfaceHandle,Param);
  end;
  if InterfaceHandle=hInterfaceRbkPayment then begin
    if not isValidPointer(Param,SizeOf(TParamRBookInterface)) then exit;
    Result:=CreateAndViewPayment(InterfaceHandle,Param);
  end;
end;

function isPermissionOnInterfaceView(InterfaceHandle: THandle): Boolean;
var
    isRemove: Boolean;
begin
    isRemove:=false;
    if InterfaceHandle=hInterfaceRbkPurpose then begin
      isRemove:=not _isPermissionOnInterface(InterfaceHandle,ttiaView);
      if isRemove then FreeAndNil(fmRBPurpose)
      else if fmRBPurpose<>nil then begin
       fmRBPurpose.SetInterfaceHandle(InterfaceHandle);
       fmRBPurpose.ActiveQuery(true);
      end;
    end;
    if InterfaceHandle=hInterfaceRbkCard then begin
      isRemove:=not _isPermissionOnInterface(InterfaceHandle,ttiaView);
      if isRemove then FreeAndNil(fmRBCard)
      else if fmRBCard<>nil then begin
       fmRBCard.SetInterfaceHandle(InterfaceHandle);
       fmRBCard.ActiveQuery(true);
      end;
    end;
    if InterfaceHandle=hInterfaceRbkPayment then begin
      isRemove:=not _isPermissionOnInterface(InterfaceHandle,ttiaView);
      if isRemove then FreeAndNil(fmRBPayment)
      else if fmRBPayment<>nil then begin
       fmRBPayment.SetInterfaceHandle(InterfaceHandle);
       fmRBPayment.ActiveQuery(true);
      end;
    end;
    result:=not isRemove;
end;

function GetNewSerCard(Nominal: Integer): string;
begin
  Result:='Test '+inttostr(Nominal);
end;

function GetNewNumCard(SymbolCount: Integer): string;
begin
  Result:='Test '+inttostr(SymbolCount);
end;

procedure Payment_GetNewSerCard(var Value: Variant; Args: TArguments);
begin
  Value:=GetNewSerCard(Args.Values[0]);
end;

procedure Payment_GetNewNumCard(var Value: Variant; Args: TArguments);
begin
  Value:=GetNewNumCard(Args.Values[0]);
end;

procedure ClearListInterpreterFunHandles;
var
  i: Integer;
begin
  for i:=0 to ListInterpreterFunHandles.Count-1 do begin
    _FreeInterpreterFun(THandle(ListInterpreterFunHandles.Items[i]));
  end;
  ListInterpreterFunHandles.Clear;
end;

procedure AddToListInterpreterFunHandles;

   function CreateInterpreterFunLocal(Identifer: PChar;
                                      Proc: TInterpreterReadProc;
                                      ProcParams: TArrOfInterpreterProcParam;
                                      ProcResultType: PInterpreterProcParam;
                                      Hint: PChar=nil): THandle;
   var
     TCIF: TCreateInterpreterFun;
     i: Integer;
   begin
     FillChar(TCIF,SizeOf(TCIF),0);
     TCIF.Identifer:=Identifer;
     TCIF.Proc:=Proc;
     for i:=Low(ProcParams) to High(ProcParams) do begin
      SetLength(TCIF.ProcParams,Length(TCIF.ProcParams)+1);
      TCIF.ProcParams[Length(TCIF.ProcParams)-1].ParamText:=ProcParams[i].ParamText;
      TCIF.ProcParams[Length(TCIF.ProcParams)-1].ParamType:=ProcParams[i].ParamType;
     end;
     if ProcResultType<>nil then
      TCIF.ProcResultType:=ProcResultType^;
     TCIF.Hint:=Hint;
     Result:=_CreateInterpreterFun(@TCIF);
     if Result<>INTERPRETERFUN_INVALID_HANDLE then
      ListInterpreterFunHandles.Add(Pointer(Result));
   end;

begin
  CreateInterpreterFunLocal('GetNewSerCard',Payment_GetNewSerCard,ArrPP(['Nominal: Integer',varInteger]),PP('String',varString));
  CreateInterpreterFunLocal('GetNewNumCard',Payment_GetNewNumCard,ArrPP(['SymbolCount: Integer',varInteger]),PP('String',varString));
end;

//********************* end of Internal *****************


//********************* Export *************************

procedure GetInfoLibrary_(P: PInfoLibrary);stdcall;
begin
  if P=nil then exit;
  P.Hint:=LibraryHint;
  P.TypeLib:=MainTypeLib;
  P.Programmers:=LibraryProgrammers;

  FSecurity.LoadDb;
  P.StopLoad:=not FSecurity.Check([sctInclination,sctRunCount]);
  P.Condition:=PChar(FSecurity.Condition);
  FSecurity.DecRunCount;
  FSecurity.SaveDb;
end;

procedure SetConnection_(IBDbase: TIBDatabase; IBTran: TIBTransaction;
                         IBDBSecurity: TIBDatabase; IBTSecurity: TIBTransaction);stdcall;
begin
  IBDB:=IBDbase;
  IBT:=IBTran;
  IBDBSec:=IBDBSecurity;
  IBTSec:=IBTSecurity;
end;

procedure RefreshLibrary_;stdcall;
begin
 try
  Screen.Cursor:=crHourGlass;
  try
    ClearListInterfaceHandles;
    AddToListInterfaceHandles;

    ClearListMenuHandles;
    AddToListMenuRootHandles;

    ClearListOptionHandles;
    AddToListOptionRootHandles;

    ClearListToolBarHandles;
    AddToListToolBarHandles;
  finally
    Screen.Cursor:=crDefault;
  end;
 except
  {$IFDEF DEBUG} on E: Exception do Assert(false,E.message); {$ENDIF}
 end;
end;



//**************** end of Export *************************

end.
