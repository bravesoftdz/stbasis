unit RAI2_UMainUnited;

 { adapter unit - converts RAI2 calls to delphi calls }
 { automatically generated by Pas2RAI2 }

{ if compiled with errors:                                   
   - to convert variant to object use function V2O            
   - to convert object to variant use function O2V            
   - to convert variant to pointer use function V2P           
   - to convert pointer to variant use function P2V           
   - to convert set to variant use function S2V and           
     typecasting such as:                                     
       Value := S2V(byte(TFont(Args.Obj).Style))              
   - to convert variant to set use typecasting                
     and function V2S such as:                                
       TFont(Args.Obj).Style := TFontStyles(byte(V2S(Value))) 
     depending on size of set (f.e. sizeof(TFontStyles)),    
     try to use byte, word or integer types in typecasting   
   - sets with more when 32 elements can't be used in RAI2   }

interface

uses RAI2;

  procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);

implementation

uses UMainUnited;

(*
{ function ShowError(Handle: THandle; Mess: String): Integer; }
procedure RAI2_ShowError(var Value: Variant; Args: TArgs);
begin
  Value := ShowError(Args.Values[0], Args.Values[1]);
end;

{ function ShowWarning(Handle: THandle; Mess: String): Integer; }
procedure RAI2_ShowWarning(var Value: Variant; Args: TArgs);
begin
  Value := ShowWarning(Args.Values[0], Args.Values[1]);
end;

{ function ShowInfo(Handle: THandle; Mess: String): Integer; }
procedure RAI2_ShowInfo(var Value: Variant; Args: TArgs);
begin
  Value := ShowInfo(Args.Values[0], Args.Values[1]);
end;

{ function ShowQuestion(Handle: THandle; Mess: String): Integer; }
procedure RAI2_ShowQuestion(var Value: Variant; Args: TArgs);
begin
  Value := ShowQuestion(Args.Values[0], Args.Values[1]);
end;

{ function GetRecordCount(qr: TIBQuery; Fetch: Boolean = false): Integer; }
procedure RAI2_GetRecordCount(var Value: Variant; Args: TArgs);
begin
  Value := GetRecordCount(Args.Values[0], Args.Values[1]);
end;
  *)
{ function GetGenId(DB: TIBDataBase; TableName: string; Increment: Word): Longword; }
procedure RAI2_GetGenId(var Value: Variant; Args: TArgs);
begin
  Value := GetGenId(Args.Values[0], Args.Values[1], Args.Values[2]);
end;

{ function TranslateIBError(Message: string): string; }
procedure RAI2_TranslateIBError(var Value: Variant; Args: TArgs);
begin
  Value := TranslateIBError(Args.Values[0]);
end;

{ function DeleteWarning(Handle: THandle; Mess: String): Integer; }
procedure RAI2_DeleteWarning(var Value: Variant; Args: TArgs);
begin
  Value := DeleteWarning(Args.Values[0], Args.Values[1]);
end;

{ procedure ChangeDataBase(Owner: TComponent; DB: TIBDatabase); }
procedure RAI2_ChangeDataBase(var Value: Variant; Args: TArgs);
begin
  ChangeDataBase(V2O(Args.Values[0]) as TComponent, Args.Values[1]);
end;

{ function StringToHexStr(S: String): String; }
procedure RAI2_StringToHexStr(var Value: Variant; Args: TArgs);
begin
  Value := StringToHexStr(Args.Values[0]);
end;

{ function HexStrToString(S: String): String; }
procedure RAI2_HexStrToString(var Value: Variant; Args: TArgs);
begin
  Value := HexStrToString(Args.Values[0]);
end;

{ procedure SetSelectedRowParams(var AFont: TFont; var ABackground: TColor); }
procedure RAI2_SetSelectedRowParams(var Value: Variant; Args: TArgs);
begin
  SetSelectedRowParams(V2O(Args.Values[0]) as TFont, Args.Values[1]);
end;

{ procedure SetSelectedColParams(var AFont: TFont; var ABackground: TColor); }
procedure RAI2_SetSelectedColParams(var Value: Variant; Args: TArgs);
begin
  SetSelectedColParams(V2O(Args.Values[0]) as TFont, Args.Values[1]);
end;

{ procedure SetMinColumnsWidth(Columns: TDBGridColumns); }
procedure RAI2_SetMinColumnsWidth(var Value: Variant; Args: TArgs);
begin
  SetMinColumnsWidth(Args.Values[0]);
end;

{ procedure ClearFields(wt: TWinControl); }
procedure RAI2_ClearFields(var Value: Variant; Args: TArgs);
begin
  ClearFields(V2O(Args.Values[0]) as TWinControl);
end;

{ function isFloat(Value: string): Boolean; }
procedure RAI2_isFloat(var Value: Variant; Args: TArgs);
begin
  Value := isFloat(Args.Values[0]);
end;

{ function isInteger(Value: string): Boolean; }
procedure RAI2_isInteger(var Value: Variant; Args: TArgs);
begin
  Value := isInteger(Args.Values[0]);
end;

{ function ChangeChar(Value: string; chOld, chNew: char): string; }
procedure RAI2_ChangeChar(var Value: Variant; Args: TArgs);
begin
  Value := ChangeChar(Args.Values[0], string(Args.Values[1])[1], string(Args.Values[2])[1]);
end;

{ function ChangeString(Value: string; strOld, strNew: string): string; }
procedure RAI2_ChangeString(var Value: Variant; Args: TArgs);
begin
  Value := ChangeString(Args.Values[0], Args.Values[1], Args.Values[2]);
end;

{ function GetStrFromCondition(isNotEmpty: Boolean; STrue, SFalse: string): string; }
procedure RAI2_GetStrFromCondition(var Value: Variant; Args: TArgs);
begin
  Value := GetStrFromCondition(Args.Values[0], Args.Values[1], Args.Values[2]);
end;

{ function FieldToVariant(Field: TField): OleVariant; }
procedure RAI2_FieldToVariant(var Value: Variant; Args: TArgs);
begin
  Value := FieldToVariant(V2O(Args.Values[0]) as TField);
end;

{ function TranslateSqlOperator(Operator: String): string; }
procedure RAI2_TranslateSqlOperator(var Value: Variant; Args: TArgs);
begin
  Value := TranslateSqlOperator(Args.Values[0]);
end;

{ procedure AssignFont(inFont, outFont: TFont); }
procedure RAI2_AssignFont(var Value: Variant; Args: TArgs);
begin
  AssignFont(V2O(Args.Values[0]) as TFont, V2O(Args.Values[1]) as TFont);
end;

{ procedure CloseAllSql(Owner: TComponent); }
procedure RAI2_CloseAllSql(var Value: Variant; Args: TArgs);
begin
  CloseAllSql(V2O(Args.Values[0]) as TComponent);
end;

{ function IsValidPointer(P: Pointer; Size: Integer = 0): Boolean; }
procedure RAI2_IsValidPointer(var Value: Variant; Args: TArgs);
begin
  Value := IsValidPointer(V2P(Args.Values[0]), Args.Values[1]);
end;

{ procedure HandleNeededToWinControl(wt: TWinControl); }
procedure RAI2_HandleNeededToWinControl(var Value: Variant; Args: TArgs);
begin
  HandleNeededToWinControl(V2O(Args.Values[0]) as TWinControl);
end;

{ function StrToHexStr(S: String): String; }
procedure RAI2_StrToHexStr(var Value: Variant; Args: TArgs);
begin
  Value := StrToHexStr(Args.Values[0]);
end;

{ function HexStrToStr(S: String): String; }
procedure RAI2_HexStrToStr(var Value: Variant; Args: TArgs);
begin
  Value := HexStrToStr(Args.Values[0]);
end;

{ procedure SetProperties(wt: TWinControl); }
procedure RAI2_SetProperties(var Value: Variant; Args: TArgs);
begin
  SetProperties(V2O(Args.Values[0]) as TWinControl);
end;

{ function PrepearWhereString(WhereString: String): string; }
procedure RAI2_PrepearWhereString(var Value: Variant; Args: TArgs);
begin
  Value := PrepearWhereString(Args.Values[0]);
end;

{ function PrepearOrderString(OrderString: String): string; }
procedure RAI2_PrepearOrderString(var Value: Variant; Args: TArgs);
begin
  Value := PrepearOrderString(Args.Values[0]);
end;

{ function GetCurCalcPeriodID(DB: TIBDatabase): Integer; }
procedure RAI2_GetCurCalcPeriodID(var Value: Variant; Args: TArgs);
begin
  Value := GetCurCalcPeriodID(Args.Values[0]);
end;

  { THackWinControl }

{ procedure _MainFormKeyDown(var Key: Word; Shift: TShiftState); }
procedure RAI2__MainFormKeyDown(var Value: Variant; Args: TArgs);
begin
  _MainFormKeyDown(Word(TVarData(Args.Values[0]).vSmallint), Args.Values[1]);
end;

{ procedure _MainFormKeyUp(var Key: Word; Shift: TShiftState); }
procedure RAI2__MainFormKeyUp(var Value: Variant; Args: TArgs);
begin
  _MainFormKeyUp(Word(TVarData(Args.Values[0]).vSmallint), Args.Values[1]);
end;

{ procedure _MainFormKeyPress(var Key: Char); }
procedure RAI2__MainFormKeyPress(var Value: Variant; Args: TArgs);
begin
  _MainFormKeyPress(string(Args.Values[0])[1]);
end;

{ function _GetIniFileName: PChar; }
procedure RAI2__GetIniFileName(var Value: Variant; Args: TArgs);
begin
  Value := string(_GetIniFileName);
end;

{ function _GetOptions: TMainOption; }
procedure RAI2__GetOptions(var Value: Variant; Args: TArgs);
begin
  Value := _GetOptions;
end;

{ function _OnVisibleInterface(InterfaceHandle: THandle; Visible: Boolean): Boolean; }
procedure RAI2__OnVisibleInterface(var Value: Variant; Args: TArgs);
begin
  Value := _OnVisibleInterface(Args.Values[0], Args.Values[1]);
end;

{ function _isPermissionOnInterface(InterfaceHandle: THandle; Action: TTypeInterfaceAction): Boolean; }
procedure RAI2__isPermissionOnInterface(var Value: Variant; Args: TArgs);
begin
  Value := _isPermissionOnInterface(Args.Values[0], Args.Values[1]);
end;

{ function QueryForParamRBookInterface(DB: TIBDataBase; SQL: string; PPRBI: PParamRBookInterface): Boolean; }
procedure RAI2_QueryForParamRBookInterface(var Value: Variant; Args: TArgs);
begin
  Value := QueryForParamRBookInterface(Args.Values[0], Args.Values[1], Args.Values[2]);
end;

{ procedure FillParamRBookInterfaceFromDataSet(DataSet: TDataSet; PPRBI: PParamRBookInterface); }
procedure RAI2_FillParamRBookInterfaceFromDataSet(var Value: Variant; Args: TArgs);
begin
  FillParamRBookInterfaceFromDataSet(V2O(Args.Values[0]) as TDataSet, Args.Values[1]);
end;

{ function QueryForParamJournalInterface(DB: TIBDataBase; SQL: string; PPJI: PParamJournalInterface): Boolean; }
procedure RAI2_QueryForParamJournalInterface(var Value: Variant; Args: TArgs);
begin
  Value := QueryForParamJournalInterface(Args.Values[0], Args.Values[1], Args.Values[2]);
end;

{ procedure FillParamJournalInterfaceFromDataSet(DataSet: TDataSet; PPJI: PParamJournalInterface); }
procedure RAI2_FillParamJournalInterfaceFromDataSet(var Value: Variant; Args: TArgs);
begin
  FillParamJournalInterfaceFromDataSet(V2O(Args.Values[0]) as TDataSet, Args.Values[1]);
end;

{ function GetFirstValueFromParamRBookInterface(PPRBI: PParamRBookInterface; FieldName: Variant): Variant; }
procedure RAI2_GetFirstValueFromParamRBookInterface(var Value: Variant; Args: TArgs);
begin
  Value := GetFirstValueFromParamRBookInterface(Args.Values[0], Args.Values[1]);
end;

{ function GetFirstValueFromParamJournalInterface(PPJI: PParamJournalInterface; FieldName: Variant): Variant; }
procedure RAI2_GetFirstValueFromParamJournalInterface(var Value: Variant; Args: TArgs);
begin
  Value := GetFirstValueFromParamJournalInterface(Args.Values[0], Args.Values[1]);
end;

{ function TranslatePermission(DBPermission: TTypeDBPermission): string; }
procedure RAI2_TranslatePermission(var Value: Variant; Args: TArgs);
begin
  Value := TranslatePermission(Args.Values[0]);
end;


procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);
begin
  with RAI2Adapter do
  begin
{    AddFun('UMainUnited', 'ShowError', RAI2_ShowError, 2, [varEmpty, varString], varInteger);
    AddFun('UMainUnited', 'ShowWarning', RAI2_ShowWarning, 2, [varEmpty, varString], varInteger);
    AddFun('UMainUnited', 'ShowInfo', RAI2_ShowInfo, 2, [varEmpty, varString], varInteger);
    AddFun('UMainUnited', 'ShowQuestion', RAI2_ShowQuestion, 2, [varEmpty, varString], varInteger);}
    AddFun('UMainUnited', 'GetRecordCount', RAI2_GetRecordCount, 2, [varEmpty, varBoolean], varInteger);
    AddFun('UMainUnited', 'GetGenId', RAI2_GetGenId, 3, [varEmpty, varString, varSmallint], varEmpty);
    AddFun('UMainUnited', 'TranslateIBError', RAI2_TranslateIBError, 1, [varString], varString);
    AddFun('UMainUnited', 'DeleteWarning', RAI2_DeleteWarning, 2, [varEmpty, varString], varInteger);
    AddFun('UMainUnited', 'ChangeDataBase', RAI2_ChangeDataBase, 2, [varObject, varEmpty], varInteger);
    AddFun('UMainUnited', 'StringToHexStr', RAI2_StringToHexStr, 1, [varString], varString);
    AddFun('UMainUnited', 'HexStrToString', RAI2_HexStrToString, 1, [varString], varString);
    AddFun('UMainUnited', 'SetSelectedRowParams', RAI2_SetSelectedRowParams, 2, [varObject or varByRef, varInteger or varByRef], varString);
    AddFun('UMainUnited', 'SetSelectedColParams', RAI2_SetSelectedColParams, 2, [varObject or varByRef, varInteger or varByRef], varString);
    AddFun('UMainUnited', 'SetMinColumnsWidth', RAI2_SetMinColumnsWidth, 1, [varEmpty], varString);
    AddFun('UMainUnited', 'ClearFields', RAI2_ClearFields, 1, [varObject], varString);
    AddFun('UMainUnited', 'isFloat', RAI2_isFloat, 1, [varString], varBoolean);
    AddFun('UMainUnited', 'isInteger', RAI2_isInteger, 1, [varString], varBoolean);
    AddFun('UMainUnited', 'ChangeChar', RAI2_ChangeChar, 3, [varString, varEmpty, varEmpty], varString);
    AddFun('UMainUnited', 'ChangeString', RAI2_ChangeString, 3, [varString, varString, varString], varString);
    AddFun('UMainUnited', 'GetStrFromCondition', RAI2_GetStrFromCondition, 3, [varBoolean, varString, varString], varString);
    AddFun('UMainUnited', 'FieldToVariant', RAI2_FieldToVariant, 1, [varObject], varEmpty);
    AddFun('UMainUnited', 'TranslateSqlOperator', RAI2_TranslateSqlOperator, 1, [varString], varString);
    AddFun('UMainUnited', 'AssignFont', RAI2_AssignFont, 2, [varObject, varObject], varString);
    AddFun('UMainUnited', 'CloseAllSql', RAI2_CloseAllSql, 1, [varObject], varString);
    AddFun('UMainUnited', 'IsValidPointer', RAI2_IsValidPointer, 2, [varPointer, varInteger], varBoolean);
    AddFun('UMainUnited', 'HandleNeededToWinControl', RAI2_HandleNeededToWinControl, 1, [varObject], varBoolean);
    AddFun('UMainUnited', 'StrToHexStr', RAI2_StrToHexStr, 1, [varString], varString);
    AddFun('UMainUnited', 'HexStrToStr', RAI2_HexStrToStr, 1, [varString], varString);
    AddFun('UMainUnited', 'SetProperties', RAI2_SetProperties, 1, [varObject], varString);
    AddFun('UMainUnited', 'PrepearWhereString', RAI2_PrepearWhereString, 1, [varString], varString);
    AddFun('UMainUnited', 'PrepearOrderString', RAI2_PrepearOrderString, 1, [varString], varString);
    AddFun('UMainUnited', 'GetCurCalcPeriodID', RAI2_GetCurCalcPeriodID, 1, [varEmpty], varInteger);
   { THackWinControl }
    AddClass('UMainUnited', THackWinControl, 'THackWinControl');
    AddFun('UMainUnited', '_MainFormKeyDown', THackWinControlRAI2__MainFormKeyDown, 2, [varSmallint or varByRef, varEmpty], varInteger);
    AddFun('UMainUnited', '_MainFormKeyUp', THackWinControlRAI2__MainFormKeyUp, 2, [varSmallint or varByRef, varEmpty], varInteger);
    AddFun('UMainUnited', '_MainFormKeyPress', THackWinControlRAI2__MainFormKeyPress, 1, [varEmpty or varByRef], varInteger);
    AddFun('UMainUnited', '_GetIniFileName', THackWinControlRAI2__GetIniFileName, 0, [0], varString);
    AddFun('UMainUnited', '_GetOptions', THackWinControlRAI2__GetOptions, 0, [0], varEmpty);
    AddFun('UMainUnited', '_OnVisibleInterface', THackWinControlRAI2__OnVisibleInterface, 2, [varEmpty, varBoolean], varBoolean);
    AddFun('UMainUnited', '_isPermissionOnInterface', THackWinControlRAI2__isPermissionOnInterface, 2, [varEmpty, varEmpty], varBoolean);
    AddFun('UMainUnited', 'QueryForParamRBookInterface', THackWinControlRAI2_QueryForParamRBookInterface, 3, [varEmpty, varString, varEmpty], varBoolean);
    AddFun('UMainUnited', 'FillParamRBookInterfaceFromDataSet', THackWinControlRAI2_FillParamRBookInterfaceFromDataSet, 2, [varObject, varEmpty], varBoolean);
    AddFun('UMainUnited', 'QueryForParamJournalInterface', THackWinControlRAI2_QueryForParamJournalInterface, 3, [varEmpty, varString, varEmpty], varBoolean);
    AddFun('UMainUnited', 'FillParamJournalInterfaceFromDataSet', THackWinControlRAI2_FillParamJournalInterfaceFromDataSet, 2, [varObject, varEmpty], varBoolean);
    AddFun('UMainUnited', 'GetFirstValueFromParamRBookInterface', THackWinControlRAI2_GetFirstValueFromParamRBookInterface, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UMainUnited', 'GetFirstValueFromParamJournalInterface', THackWinControlRAI2_GetFirstValueFromParamJournalInterface, 2, [varEmpty, varEmpty], varEmpty);
    AddFun('UMainUnited', 'TranslatePermission', THackWinControlRAI2_TranslatePermission, 1, [varEmpty], varString);
  end;    { with }
end;    { RegisterRAI2Adapter }

end.
